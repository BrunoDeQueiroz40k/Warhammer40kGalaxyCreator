"use client";

import { useEffect, useRef } from 'react';

export function Loading() {
   const canvasRef = useRef<HTMLCanvasElement>(null);

   useEffect(() => {
      const canvas = canvasRef.current;
      if (!canvas) return;

      const ctx = canvas.getContext('2d');
      if (!ctx) return;

      // Configurações do canvas
      const canvasWidth = 400;
      const canvasHeight = 400;
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      // Path data combinado (original + espelhado deslocado)
      const pathData = "M93.531 94.429C93.554 94.4 93.644 94.05 93.381 93.992L.371 48.124C.294 48.124.058 48.147-.006 48.459L3.457 61.617 72.457 91.029 72.463 91.308 71.331 92.591 70.923 92.594 5.211 66.583C5.122 66.601 4.883 66.712 4.878 66.915L10.046 79.963 68.253 95.772 68.253 96.082 66.526 98.534 66.134 98.553 13.134 86.672C13.035 86.679 12.792 86.722 12.818 86.977L17.29 98.551 65.334 102.225 65.119 104.909 20.461 104.923C20.394 104.91 20.131 105.034 20.17 105.32L26.513 116.508 64.592 108.933 65.126 108.903 65.486 111.303 30.124 122.008C29.971 122.071 29.794 122.219 30.014 122.541L36.249 130.248 66.77 117.032 67.191 117.034 67.976 118.39 67.979 118.701 39.733 134.404C39.675 134.407 39.501 134.65 39.66 134.867L47.751 141.283 70.95 121.998 71.172 121.998 72.451 122.992 72.451 123.152 42.012 153.155C42.061 153.331 41.761 153.57 42.159 153.683L55.932 152.024 76.094 125.09 76.558 125.085 77.902 125.447 77.902 125.735 63.485 149.707C63.421 149.764 63.455 150.189 63.756 150.174L74.584 147.916 81.918 126.337 83.932 126.261 78.959 146.147C78.916 146.235 79.097 146.679 79.514 146.419L88.842 137.307 88.839 126.803 90.864 126.459 90.861 134.826 91.403 134.946 96.338 129.161 96.043 125.37 97.7 124.931 98.113 124.926 99.591 128.315 99.588 128.62 74.409 156.178C74.252 156.342 74.162 156.769 74.598 156.842L94.939 158.026 116.949 121.993 116.89 121.556 110.669 112.248 110.201 112.254C81.213 136.278 58.76 96.34 92.151 97.185M117.919 119.415 109.732 107.349C109.594 107.108 109.689 106.951 109.769 106.863L115.037 101.133 115.315 100.921 117.943 100.933 123.717 110.118C123.762 110.185 123.756 110.375 123.712 110.429L118.424 119.395C118.41 119.44 118.154 119.684 117.919 119.415M104.822 103.611 102.347 100.158 98.361 100.164C93.822 102.751 91.545 103.617 92.927 105.454L96.433 108.984C96.63 109.243 96.883 109.196 97.026 109.017 98.516 103.037 103.892 104.148 104.606 104.017 104.81 103.927 104.854 103.701 104.821 103.611M108.148 105.303C108.451 105.752 108.576 105.498 108.762 105.309L114.389 99.478 118.09 99.469 121.73 95.36C121.85 95.228 121.869 94.843 121.464 94.845L103.496 94.849C103.286 94.827 103.043 94.877 102.88 95.092L100.207 97.622C100.089 97.724 99.958 98.05 100.248 98.196L100.81 98.626 103.177 98.64M101.394 154.07 95.581 163.948 87.259 163.744C87.038 163.744 86.721 163.786 86.844 164.271L87.945 168.853C88.177 169.369 88.398 169.065 88.537 168.847L88.987 167.272 92.379 167.551 92.385 167.847 85.82 177.91C85.7 178.131 85.635 178.454 85.991 178.514L94.795 180.276C95.127 180.149 95.038 179.812 94.931 179.732L91.355 175.675 91.349 175.545 96.76 169.914 97.062 169.902 101.827 174.273 101.833 174.628 98.682 179.365C98.433 179.729 98.847 180.007 98.969 179.91L106.065 176.232C106.263 176.08 106.117 175.875 106.035 175.757L100.125 166.767 100.113 166.434 105.669 157.947 102.237 153.927C102.061 153.752 101.745 153.416 101.395 154.069M124.999 112.656C124.838 112.693 124.748 112.664 124.437 113.25L102.392 150.548C102.273 150.725 102.158 150.908 102.406 151.208L107.644 157.52 107.717 157.702 107.711 158.199 102.506 166.484 104.152 168.819C104.322 169.089 104.52 169.097 104.732 168.828L109.822 161.107 110.083 161.095 110.507 161.693 110.502 161.984 105.437 170.117C105.325 170.275 105.173 170.381 105.424 170.717L106.988 173.555C107.265 173.855 107.447 173.848 107.632 173.537L112.04 163.868 112.327 163.828 112.733 164.398 112.74 164.779 108.228 175.266C108.084 175.498 108.016 175.779 108.249 176.026L111.757 182.527C111.827 182.759 112.109 183.064 112.373 182.634L121.501 163.825 121.696 163.806 122.465 164.696 122.463 165.032 114.138 184.622C114.055 184.827 113.938 185.061 114.152 185.259L124.195 200.842C124.449 201.318 124.771 201.884 125 201.842 M306.469 94.429C306.446 94.4 306.356 94.05 306.619 93.992L399.629 48.124C399.706 48.124 399.942 48.147 400.006 48.459L396.543 61.617 327.543 91.029 327.537 91.308 328.669 92.591 329.077 92.594 394.789 66.583C394.878 66.601 395.117 66.712 395.122 66.915L389.954 79.963 331.747 95.772 331.747 96.082 333.474 98.534 333.866 98.553 386.866 86.672C386.965 86.679 387.208 86.722 387.182 86.977L382.71 98.551 334.666 102.225 334.881 104.909 379.539 104.923C379.606 104.91 379.869 105.034 379.83 105.32L373.487 116.508 335.408 108.933 334.874 108.903 334.514 111.303 369.876 122.008C370.029 122.071 370.206 122.219 369.986 122.541L363.751 130.248 333.23 117.032 332.809 117.034 332.024 118.39 332.021 118.701 360.267 134.404C360.325 134.407 360.499 134.65 360.34 134.867L352.249 141.283 329.05 121.998 328.828 121.998 327.549 122.992 327.549 123.152 357.988 153.155C357.939 153.331 358.239 153.57 357.841 153.683L344.068 152.024 323.906 125.09 323.442 125.085 322.098 125.447 322.098 125.735 336.515 149.707C336.579 149.764 336.545 150.189 336.244 150.174L325.416 147.916 318.082 126.337 316.068 126.261 321.041 146.147C321.084 146.235 320.903 146.679 320.486 146.419L311.158 137.307 311.161 126.803 309.136 126.459 309.139 134.826 308.597 134.946 303.662 129.161 303.957 125.37 302.3 124.931 301.887 124.926 300.409 128.315 300.412 128.62 325.591 156.178C325.748 156.342 325.838 156.769 325.402 156.842L305.061 158.026 283.051 121.993 283.11 121.556 289.331 112.248 289.799 112.254C318.787 136.278 341.24 96.34 307.849 97.185M282.081 119.415 290.268 107.349C290.406 107.108 290.311 106.951 290.231 106.863L284.963 101.133 284.685 100.921 282.057 100.933 276.283 110.118C276.238 110.185 276.244 110.375 276.288 110.429L281.576 119.395C281.59 119.44 281.846 119.684 282.081 119.415M295.178 103.611 297.653 100.158 301.639 100.164C306.178 102.751 308.455 103.617 307.073 105.454L303.567 108.984C303.37 109.243 303.117 109.196 302.974 109.017 301.484 103.037 296.108 104.148 295.394 104.017 295.19 103.927 295.146 103.701 295.179 103.611M291.852 105.303C291.549 105.752 291.424 105.498 291.238 105.309L285.611 99.478 281.91 99.469 278.27 95.36C278.15 95.228 278.131 94.843 278.536 94.845L296.504 94.849C296.714 94.827 296.957 94.877 297.12 95.092L299.793 97.622C299.911 97.724 300.042 98.05 299.752 98.196L299.19 98.626 296.823 98.64M298.606 154.07 304.419 163.948 312.741 163.744C312.962 163.744 313.279 163.786 313.156 164.271L312.055 168.853C311.823 169.369 311.602 169.065 311.463 168.847L311.013 167.272 307.621 167.551 307.615 167.847 314.18 177.91C314.3 178.131 314.365 178.454 314.009 178.514L305.205 180.276C304.873 180.149 304.962 179.812 305.069 179.732L308.645 175.675 308.651 175.545 303.24 169.914 302.938 169.902 298.173 174.273 298.167 174.628 301.318 179.365C301.567 179.729 301.153 180.007 301.031 179.91L293.935 176.232C293.737 176.08 293.883 175.875 293.965 175.757L299.875 166.767 299.887 166.434 294.331 157.947 297.763 153.927C297.939 153.752 298.255 153.416 298.605 154.069M275.001 112.656C275.162 112.693 275.252 112.664 275.563 113.25L297.608 150.548C297.727 150.725 297.842 150.908 297.594 151.208L292.356 157.52 292.283 157.702 292.289 158.199 297.494 166.484 295.848 168.819C295.678 169.089 295.48 169.097 295.268 168.828L290.178 161.107 289.917 161.095 289.493 161.693 289.498 161.984 294.563 170.117C294.675 170.275 294.827 170.381 294.576 170.717L293.012 173.555C292.735 173.855 292.553 173.848 292.368 173.537L287.96 163.868 287.673 163.828 287.267 164.398 287.26 164.779 291.772 175.266C291.916 175.498 291.984 175.779 291.751 176.026L288.243 182.527C288.173 182.759 287.891 183.064 287.627 182.634L278.499 163.825 278.304 163.806 277.535 164.696 277.537 165.032 285.862 184.622C285.945 184.827 286.062 185.061 285.848 185.259L275.805 200.842C275.551 201.318 275.229 201.884 275 201.842";

      // Criar path do SVG
      const path = new Path2D(pathData);

      // Variáveis de animação
      let shinePosition = -200;
      let animationId: number;

      const animate = () => {
         // Limpar canvas
         ctx.clearRect(0, 0, canvasWidth, canvasHeight);

         // Desenhar o path combinado
         ctx.fillStyle = '#865F05';
         ctx.fill(path);

         // Criar máscara para o brilho
         ctx.save();
         ctx.clip(path);

         // Desenhar o brilho
         const gradient = ctx.createLinearGradient(shinePosition - 50, 0, shinePosition + 50, 0);
         gradient.addColorStop(0, 'rgba(255,255,255,0)');
         gradient.addColorStop(0.3, 'rgba(255,255,255,0)');
         gradient.addColorStop(0.5, 'rgba(255,255,255,0.8)');
         gradient.addColorStop(0.7, 'rgba(255,255,255,0)');
         gradient.addColorStop(1, 'rgba(255,255,255,0)');

         ctx.fillStyle = gradient;
         ctx.fillRect(0, 0, canvasWidth, canvasHeight);
         ctx.restore();

         // Atualizar posição do brilho
         shinePosition += 2;
         if (shinePosition > canvasWidth + 100) {
            shinePosition = -200;
         }

         animationId = requestAnimationFrame(animate);
      };

      animate();

      return () => {
         if (animationId) {
            cancelAnimationFrame(animationId);
         }
      };
   }, []);

   return (
      <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black">
         <div className="flex">
            <canvas
               ref={canvasRef}
               className="w-64 h-64 select-none pointer-events-none"
            />
         </div>
      </div>
   )
}